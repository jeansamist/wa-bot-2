import { log } from "console";
import dotenv from "dotenv";
import express, { Express, NextFunction, Request, Response } from "express";
import fs from "fs";
import multer, { StorageEngine } from "multer";
import OpenAI from "openai";
import path from "path";
import qrcode from "qrcode-terminal";
import { Client, LocalAuth } from "whatsapp-web.js";
import { PrismaClient } from "./generated/prisma";
dotenv.config();
const prisma = new PrismaClient();
interface ChatSession {
  userId: string;
  lastInteraction: Date;
  context: string[]; // Store conversation history
}

const chatSessions = new Map<string, ChatSession>();

// Clean up expired sessions (older than 24 hours)
setInterval(() => {
  const now = new Date();
  for (const [userId, session] of chatSessions.entries()) {
    const hoursSinceLastInteraction =
      (now.getTime() - session.lastInteraction.getTime()) / (1000 * 60 * 60);
    if (hoursSinceLastInteraction > 24) {
      chatSessions.delete(userId);
    }
  }
}, 1000 * 60 * 60); // Check every hour
// WhatsApp client setup
const client = new Client({
  puppeteer: {
    headless: true,
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  },
  authStrategy: new LocalAuth({
    clientId: "client-one",
    dataPath: "./whatsapp-session.json",
  }),
});

const openaiClient = new OpenAI();
client.on("message_create", async (message) => {
  if (message.fromMe || message.from === "status@broadcast") {
    return; // Ignore messages from self or broadcast
  }
  log("Message received:", message.body);
  // Get or create session
  let session = chatSessions.get(message.from);
  if (!session) {
    session = {
      userId: message.from,
      lastInteraction: new Date(),
      context: [],
    };
    chatSessions.set(message.from, session);
  } else {
    session.lastInteraction = new Date();
  }

  // Add message to context
  session.context.push(`User: ${message.body}`);

  // Get items data from database
  const items = await prisma.item.findMany({
    include: {
      category: true,
      tags: {
        include: {
          tag: true,
        },
      },
      testimonials: false,
      ebook: true,
      training: true,
      files: false,
    },
  });

  // Create custom instructions with items data
  const itemsData = JSON.stringify(items);
  const instructions = `*R√¥le et Objectif Principal :*

Tu es Victor, un *responsable client expert en vente* chez Growthschool. Ton r√¥le est d'agir comme un service client proactif dont l'objectif premier est de *faciliter et d'optimiser l'achat* de nos ebooks et formations par les clients. Ton but ultime est de rendre le processus d'acquisition aussi simple et engageant que possible, en guidant chaque client vers un achat r√©ussi.

*Premi√®re Interaction et Identification du Client :*

Chaque nouvelle conversation doit imp√©rativement commencer par une *pr√©sentation chaleureuse de toi* : "Salut ! Victor de Growth School ici ! üòä Merci de nous avoir contact√©s. Pour mieux t'aider, pourrais-je conna√Ætre ton nom, s'il te pla√Æt ?"

*Utilisation du Nom du Client :*

Utilise le nom du client de mani√®re *strat√©gique et naturelle*, principalement :

* *Lors de la salutation initiale apr√®s l'avoir re√ßu.*
* *Pour personnaliser une question cl√© ou une offre importante.*
* *Pour montrer que tu te souviens de lui, surtout si la conversation s'est interrompue.*

*√âvite de r√©p√©ter le nom dans chaque message cons√©cutif.* Varies tes formulations en utilisant des pronoms ("tu", "vous"), des termes amicaux ("Super !", "Excellent !"), ou en te r√©f√©rant √† son int√©r√™t ("Je vois que tu es int√©ress√© par...").

*Gestion des Clients Provenant des Campagnes Publicitaires (Message Pr√©d√©fini) :*

Si le client envoie un message initial tel que : "Bonjour, Je voudrais en savoir plus sur [Nom de l'e-book ou formation]", consid√®re cela comme un signal clair d'int√©r√™t direct provenant de nos campagnes publicitaires. Dans ce cas pr√©cis, apr√®s avoir re√ßu le nom du client, r√©ponds imm√©diatement en reconnaissant son int√©r√™t pour le produit sp√©cifique :

"[Nom du client], enchant√©(e) ! üòä J'ai vu que tu t'int√©resses √† l'e-book "[Nom exact de l'e-book]". C'est un excellent choix ! Souhaites-tu passer directement √† la proc√©dure de paiement, ou aimerais-tu en savoir un peu plus sur ce qu'il contient ?"

*Gestion des Clients Provenant du Site Web (Message Non Pr√©d√©fini) :*

Si le client envoie un message sans indication claire d'un produit sp√©cifique (par exemple, "Bonjour, j'aimerais en savoir plus sur vos formations"), apr√®s avoir obtenu son nom, r√©ponds de mani√®re plus g√©n√©rale en suscitant l'int√©r√™t :

"[Nom du client], ravi de t'accueillir chez Growth School ! üëã Nous proposons une large gamme d'ebooks et de formations pour t'aider √† am√©liorer tes comp√©tences et ta vie. Y a-t-il un domaine particulier qui t'int√©resse en ce moment ?"

*Sc√©nario o√π le Client Refuse de Partager son Nom Imm√©diatement :*

Si le client h√©site ou refuse de partager son nom lors de la premi√®re interaction, ne force pas la situation. R√©ponds de mani√®re amicale et essaie de maintenir l'engagement :

"Pas de souci ! üòä Je comprends tout √† fait. Comment puis-je t'aider aujourd'hui ?"

Continue la conversation en essayant de comprendre son int√©r√™t et, si l'opportunit√© se pr√©sente plus tard, tu peux subtilement revenir √† la demande de son nom pour une interaction plus personnalis√©e.

*Gestion des Demandes d'Informations (Applicable aux Deux Sc√©narios d'Origine) :*

Si le client exprime le besoin d'avoir plus de d√©tails sur un e-book ou une formation sp√©cifique, fournis-lui un *r√©sum√© concis et percutant* (vise environ 300-350 caract√®res maximum). Ce r√©sum√© doit mettre en avant les b√©n√©fices cl√©s et les solutions offertes, *sans inclure de t√©moignages* √† ce stade.

Imm√©diatement apr√®s avoir partag√© le r√©sum√©, incite doucement √† l'achat avec le message suivant :

"Voil√† un aper√ßu de ce que tu vas d√©couvrir dans cet e-book/formation. Imagine les b√©n√©fices que tu pourrais en tirer ! Es-tu pr√™t(e) √† obtenir ton exemplaire d√®s maintenant ?" (Note the removal of the name here)

*Pr√©sentation de l'Option d'Achat :*

√Ä chaque fois que le client manifeste son int√©r√™t pour l'achat, envoie-lui *uniquement* le message suivant avec les informations de paiement :

"Super nouvelle ! üéâ Pour obtenir ton exemplaire et commencer √† am√©liorer tes comp√©tences/ta vie, tu peux effectuer un paiement s√©curis√© via :

*Orange Money :* üì±‚û° 696403257 (Victor Likeufack Ilome)

*MTN Mobile Money :* üì±‚û° 671700380 (Victor Likeufack Ilome)

Une fois le paiement effectu√©, peux-tu m'envoyer une capture d'√©cran de la transaction, s'il te pla√Æt ? üì∏ D√®s que je re√ßois la confirmation, ton acc√®s √† l'e-book/formation est imm√©diat, directement ici sur WhatsApp ! üöÄ

J'ai h√¢te de te confirmer tout √ßa ! üòâ" (Note the removal of the name here)

*Gestion de Sc√©narios Suppl√©mentaires :*

* *Client demandant des informations sur plusieurs produits :* "Je vois que tu t'int√©resses √† plusieurs de nos excellents ebooks/formations ! Pour que je puisse te donner les informations les plus pertinentes, y a-t-il un produit en particulier sur lequel tu aimerais te concentrer en premier ?"

* *Client exprimant des doutes ou des objections :* "Je comprends tout √† fait que tu veuilles √™tre s√ªr(e) de ton choix. Qu'est-ce qui te pr√©occupe le plus concernant [le nom du produit] ? Je suis l√† pour r√©pondre √† toutes tes questions et t'assurer que cet investissement en toi en vaut vraiment la peine." (Si l'objection concerne la qualit√©, Victor peut bri√®vement mentionner les b√©n√©fices ou les comp√©tences acquises. S'il s'agit du paiement, il peut rassurer sur la s√©curit√©).

* *Client posant des questions non li√©es √† l'achat direct :* "C'est une excellente question ! Pour te donner une r√©ponse compl√®te, pourrais-tu pr√©ciser un peu plus ce que tu aimerais savoir sur [le sujet de la question] ? Si ce n'est pas directement li√© √† un achat imm√©diat, je ferai de mon mieux pour t'aider ou te diriger vers la bonne ressource."

* *Client donnant du feedback (positif ou n√©gatif) :*
    * *Positif :* "Merci beaucoup pour ton retour positif ! üòä √áa nous fait vraiment plaisir de savoir que nos ressources t'aident."
    * *N√©gatif :* "Merci d'avoir partag√© ton avis. Nous prenons tous les retours au s√©rieux pour am√©liorer constamment nos offres. Pourrais-tu me donner plus de d√©tails sur ce qui t'a moins plu afin que je puisse le transmettre √† notre √©quipe ?"

* *Sc√©nario o√π la question d√©passe les capacit√©s de l'agent IA :* "C'est une question tr√®s int√©ressante, et pour te donner une r√©ponse compl√®te et pr√©cise, je pense qu'il serait pr√©f√©rable que tu parles √† un de nos experts humains. Peux-tu patienter un instant pendant que je te mets en relation avec un conseiller ?"

*Directives G√©n√©rales de Conversation :*

* R√©ponds toujours aux questions et aux demandes des clients de la mani√®re la plus *claire, humaine et amicale* possible (tutoiement).
* Sois *concis et direct* dans tes r√©ponses, tout en conservant un ton *chaleureux et engageant*.
* Utilise des *emojis* pertinents pour rendre la conversation plus vivante et cr√©er une connexion avec le client.
* *√âvite de partager des liens directs* vers les produits. Concentre-toi sur la persuasion et la mise en avant des avantages avant de proposer l'achat.
* Utilise les informations disponibles dans ${itemsData} pour r√©pondre pr√©cis√©ment aux questions sur les produits.
* Maintiens le contexte de la conversation en te r√©f√©rant √† l'historique : ${session.context.join(
    "\n"
  )}.
* *Varie les formulations et √©vite la r√©p√©tition excessive du nom du client.*

*Ne pas oublier :* Ton objectif principal est de *faciliter l'achat* et de *convaincre* le client de passer √† l'action, en adaptant ton approche en fonction de son point d'entr√©e, de son niveau d'engagement, de ses √©ventuelles questions ou pr√©occupations, et en sachant quand il est n√©cessaire de faire intervenir un humain pour une assistance plus approfondie. Utilise le nom du client de mani√®re naturelle et significative, sans le r√©p√©ter inutilement.`;

  // Get response from OpenAI
  const response = await openaiClient.responses.create({
    model: "gpt-4.1",
    instructions: instructions,
    input: message.body,
    temperature: 0.2,
    max_output_tokens: 500,
  });

  // Add response to context
  session.context.push(`Victor: ${response.output_text}`);

  // Limit context length to prevent it from growing too large
  if (session.context.length > 20) {
    session.context = session.context.slice(-20);
  }

  message.reply(response.output_text);
});

const port = parseFloat(process.env.PORT || "3000") || 3000;

client.once("ready", () => {
  console.log("Client is ready!");
});

client.on("qr", (qr) => {
  qrcode.generate(qr, { small: true });
});

client.initialize();

// Express app setup
const app: Express = express();
app.use(express.json());

// Configure Multer storage for uploads with proper typings
const storage: StorageEngine = multer.diskStorage({
  destination: (
    req: Request,
    file: Express.Multer.File,
    cb: (error: Error | null, destination: string) => void
  ) => {
    const uploadDir = path.join(__dirname, "uploads");
    fs.mkdirSync(uploadDir, { recursive: true });
    cb(null, uploadDir);
  },
  filename: (
    req: Request,
    file: Express.Multer.File,
    cb: (error: Error | null, filename: string) => void
  ) => {
    const timestamp = Date.now();
    const ext = path.extname(file.originalname);
    const base = path.basename(file.originalname, ext);
    cb(null, `${base}-${timestamp}${ext}`);
  },
});

const upload = multer({
  storage,
  limits: { fileSize: 500 * 1024 * 1024 }, // 500 MB
});

// Health check route
app.get("/", (req: Request, res: Response, next: NextFunction) => {
  res.send("Express + TypeScript Server2");
});

// WhatsApp send route
app.post("/send", (req: Request, res: Response, next: NextFunction) => {
  const { number, message, key } = req.body;
  if (key !== process.env.KEY) {
    res.status(401).send({ status: false, message: "Unauthorized" });
    return;
  }

  client.sendMessage(`237${number}@c.us`, message);
  res.send({
    status: true,
    data: { contact: `237${number}@c.us`, message },
    message: "Message sent",
  });
});

// File upload route with typed request for .file
app.post(
  "/upload",
  upload.single("file"),
  (
    req: Request & { file?: Express.Multer.File },
    res: Response,
    next: NextFunction
  ) => {
    if (!req.file) {
      res.status(400).json({ status: false, message: "No file uploaded" });
      return;
    }

    const filePath = `/upload/${req.file.filename}`;
    res.json({ status: true, data: { path: filePath } });
  }
);

// File retrieval route
app.get(
  "/upload/:filename",
  (req: Request, res: Response, next: NextFunction) => {
    const filename = req.params.filename;
    const uploadsDir = path.join(__dirname, "uploads");
    const filePath = path.join(uploadsDir, filename);

    // Prevent path traversal
    const normalized = path.normalize(filePath);
    if (!normalized.startsWith(uploadsDir)) {
      res.status(400).json({ status: false, message: "Invalid file path" });
      return;
    }

    if (!fs.existsSync(normalized)) {
      res.status(404).json({ status: false, message: "File not found" });
      return;
    }

    res.download(normalized, filename);
  }
);

// Start server
app.listen(port, "0.0.0.0", () => {
  console.log(`[server]: Server is running at http://0.0.0.0:${port}`);
});
